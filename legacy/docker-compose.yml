# version: '3.8'

# services:
#   app:
#     build: .
#     container_name: fastapi_app
#     ports:
#       - "8000:8000"
#     depends_on:
#       - redis
#       - db
#     env_file: .env
#     volumes:
#       - .:/app

#   mock_api:
#     build:
#       context: .
#       dockerfile: Dockerfile.mock
#     container_name: mock_api
#     ports:
#       - "8080:8080"
#     restart: always
#     env_file: .env

#   redis:
#     image: "redis:alpine"
#     container_name: redis_cache
#     restart: always
#     ports:
#       - "6379:6379"

#   db:
#     image: "postgres:15"
#     container_name: postgres_db
#     restart: always
#     environment:
#       POSTGRES_USER: stepsuser
#       POSTGRES_PASSWORD: stepsai
#       POSTGRES_DB: stepsdb
#     ports:
#       - "5432:5432"

#   celery_worker:
#     build:
#       context: .
#       dockerfile: Dockerfile.celery
#     container_name: celery_worker
#     depends_on:
#       - redis
#       - db
#     env_file: .env
#     volumes:
#       - .:/app

#   celery_beat:
#     build:
#       context: .
#       dockerfile: Dockerfile.celery
#     container_name: celery_beat
#     command: ["celery", "-A", "celery_worker", "beat", "--loglevel=info"]
#     depends_on:
#       - redis
#       - db
#       - celery_worker
#     env_file: .env
#     volumes:
#       - .:/app
version: '3.8'

services:
  app:
    build: .
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mock_api:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: mock_api
    ports:
      - "8080:8080"
    restart: always
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/moderations"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: "redis:alpine"
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  db:
    image: "postgres:15"
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: stepsuser
      POSTGRES_PASSWORD: stepsai
      POSTGRES_DB: stepsdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "stepsuser", "-d", "stepsdb"]
      interval: 30s
      timeout: 5s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_worker
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file: .env
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_worker", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_beat
    command: ["celery", "-A", "celery_worker", "beat", "--loglevel=info"]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    env_file: .env
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_worker", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
